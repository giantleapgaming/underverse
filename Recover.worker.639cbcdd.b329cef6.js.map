{"mappings":"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","sources":["../../node_modules/is-observable/index.js","../../node_modules/threads/dist-esm/serializers.js","../../node_modules/threads/dist-esm/common.js","../../node_modules/threads/dist-esm/symbols.js","../../node_modules/threads/dist-esm/transferable.js","../../node_modules/threads/dist-esm/types/messages.js","../../node_modules/threads/dist-esm/worker/implementation.browser.js","../../node_modules/threads/dist-esm/worker/index.js","../../node_modules/@latticexyz/network/src/utils.ts","../../node_modules/@latticexyz/network/src/workers/Recover.worker.ts"],"sourcesContent":["'use strict';\n\nmodule.exports = value => {\n\tif (!value) {\n\t\treturn false;\n\t}\n\n\t// eslint-disable-next-line no-use-extend-native/no-use-extend-native\n\tif (typeof Symbol.observable === 'symbol' && typeof value[Symbol.observable] === 'function') {\n\t\t// eslint-disable-next-line no-use-extend-native/no-use-extend-native\n\t\treturn value === value[Symbol.observable]();\n\t}\n\n\tif (typeof value['@@observable'] === 'function') {\n\t\treturn value === value['@@observable']();\n\t}\n\n\treturn false;\n};\n","export function extendSerializer(extend, implementation) {\n    const fallbackDeserializer = extend.deserialize.bind(extend);\n    const fallbackSerializer = extend.serialize.bind(extend);\n    return {\n        deserialize(message) {\n            return implementation.deserialize(message, fallbackDeserializer);\n        },\n        serialize(input) {\n            return implementation.serialize(input, fallbackSerializer);\n        }\n    };\n}\nconst DefaultErrorSerializer = {\n    deserialize(message) {\n        return Object.assign(Error(message.message), {\n            name: message.name,\n            stack: message.stack\n        });\n    },\n    serialize(error) {\n        return {\n            __error_marker: \"$$error\",\n            message: error.message,\n            name: error.name,\n            stack: error.stack\n        };\n    }\n};\nconst isSerializedError = (thing) => thing && typeof thing === \"object\" && \"__error_marker\" in thing && thing.__error_marker === \"$$error\";\nexport const DefaultSerializer = {\n    deserialize(message) {\n        if (isSerializedError(message)) {\n            return DefaultErrorSerializer.deserialize(message);\n        }\n        else {\n            return message;\n        }\n    },\n    serialize(input) {\n        if (input instanceof Error) {\n            return DefaultErrorSerializer.serialize(input);\n        }\n        else {\n            return input;\n        }\n    }\n};\n","import { extendSerializer, DefaultSerializer } from \"./serializers\";\nlet registeredSerializer = DefaultSerializer;\nexport function registerSerializer(serializer) {\n    registeredSerializer = extendSerializer(registeredSerializer, serializer);\n}\nexport function deserialize(message) {\n    return registeredSerializer.deserialize(message);\n}\nexport function serialize(input) {\n    return registeredSerializer.serialize(input);\n}\n","export const $errors = Symbol(\"thread.errors\");\nexport const $events = Symbol(\"thread.events\");\nexport const $terminate = Symbol(\"thread.terminate\");\nexport const $transferable = Symbol(\"thread.transferable\");\nexport const $worker = Symbol(\"thread.worker\");\n","import { $transferable } from \"./symbols\";\nfunction isTransferable(thing) {\n    if (!thing || typeof thing !== \"object\")\n        return false;\n    // Don't check too thoroughly, since the list of transferable things in JS might grow over time\n    return true;\n}\nexport function isTransferDescriptor(thing) {\n    return thing && typeof thing === \"object\" && thing[$transferable];\n}\nexport function Transfer(payload, transferables) {\n    if (!transferables) {\n        if (!isTransferable(payload))\n            throw Error();\n        transferables = [payload];\n    }\n    return {\n        [$transferable]: true,\n        send: payload,\n        transferables\n    };\n}\n","/////////////////////////////\n// Messages sent by master:\nexport var MasterMessageType;\n(function (MasterMessageType) {\n    MasterMessageType[\"cancel\"] = \"cancel\";\n    MasterMessageType[\"run\"] = \"run\";\n})(MasterMessageType || (MasterMessageType = {}));\n////////////////////////////\n// Messages sent by worker:\nexport var WorkerMessageType;\n(function (WorkerMessageType) {\n    WorkerMessageType[\"error\"] = \"error\";\n    WorkerMessageType[\"init\"] = \"init\";\n    WorkerMessageType[\"result\"] = \"result\";\n    WorkerMessageType[\"running\"] = \"running\";\n    WorkerMessageType[\"uncaughtError\"] = \"uncaughtError\";\n})(WorkerMessageType || (WorkerMessageType = {}));\n","/// <reference lib=\"dom\" />\n// tslint:disable no-shadowed-variable\nconst isWorkerRuntime = function isWorkerRuntime() {\n    const isWindowContext = typeof self !== \"undefined\" && typeof Window !== \"undefined\" && self instanceof Window;\n    return typeof self !== \"undefined\" && self.postMessage && !isWindowContext ? true : false;\n};\nconst postMessageToMaster = function postMessageToMaster(data, transferList) {\n    self.postMessage(data, transferList);\n};\nconst subscribeToMasterMessages = function subscribeToMasterMessages(onMessage) {\n    const messageHandler = (messageEvent) => {\n        onMessage(messageEvent.data);\n    };\n    const unsubscribe = () => {\n        self.removeEventListener(\"message\", messageHandler);\n    };\n    self.addEventListener(\"message\", messageHandler);\n    return unsubscribe;\n};\nexport default {\n    isWorkerRuntime,\n    postMessageToMaster,\n    subscribeToMasterMessages\n};\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport isSomeObservable from \"is-observable\";\nimport { deserialize, serialize } from \"../common\";\nimport { isTransferDescriptor } from \"../transferable\";\nimport { MasterMessageType, WorkerMessageType } from \"../types/messages\";\nimport Implementation from \"./implementation\";\nexport { registerSerializer } from \"../common\";\nexport { Transfer } from \"../transferable\";\n/** Returns `true` if this code is currently running in a worker. */\nexport const isWorkerRuntime = Implementation.isWorkerRuntime;\nlet exposeCalled = false;\nconst activeSubscriptions = new Map();\nconst isMasterJobCancelMessage = (thing) => thing && thing.type === MasterMessageType.cancel;\nconst isMasterJobRunMessage = (thing) => thing && thing.type === MasterMessageType.run;\n/**\n * There are issues with `is-observable` not recognizing zen-observable's instances.\n * We are using `observable-fns`, but it's based on zen-observable, too.\n */\nconst isObservable = (thing) => isSomeObservable(thing) || isZenObservable(thing);\nfunction isZenObservable(thing) {\n    return thing && typeof thing === \"object\" && typeof thing.subscribe === \"function\";\n}\nfunction deconstructTransfer(thing) {\n    return isTransferDescriptor(thing)\n        ? { payload: thing.send, transferables: thing.transferables }\n        : { payload: thing, transferables: undefined };\n}\nfunction postFunctionInitMessage() {\n    const initMessage = {\n        type: WorkerMessageType.init,\n        exposed: {\n            type: \"function\"\n        }\n    };\n    Implementation.postMessageToMaster(initMessage);\n}\nfunction postModuleInitMessage(methodNames) {\n    const initMessage = {\n        type: WorkerMessageType.init,\n        exposed: {\n            type: \"module\",\n            methods: methodNames\n        }\n    };\n    Implementation.postMessageToMaster(initMessage);\n}\nfunction postJobErrorMessage(uid, rawError) {\n    const { payload: error, transferables } = deconstructTransfer(rawError);\n    const errorMessage = {\n        type: WorkerMessageType.error,\n        uid,\n        error: serialize(error)\n    };\n    Implementation.postMessageToMaster(errorMessage, transferables);\n}\nfunction postJobResultMessage(uid, completed, resultValue) {\n    const { payload, transferables } = deconstructTransfer(resultValue);\n    const resultMessage = {\n        type: WorkerMessageType.result,\n        uid,\n        complete: completed ? true : undefined,\n        payload\n    };\n    Implementation.postMessageToMaster(resultMessage, transferables);\n}\nfunction postJobStartMessage(uid, resultType) {\n    const startMessage = {\n        type: WorkerMessageType.running,\n        uid,\n        resultType\n    };\n    Implementation.postMessageToMaster(startMessage);\n}\nfunction postUncaughtErrorMessage(error) {\n    try {\n        const errorMessage = {\n            type: WorkerMessageType.uncaughtError,\n            error: serialize(error)\n        };\n        Implementation.postMessageToMaster(errorMessage);\n    }\n    catch (subError) {\n        // tslint:disable-next-line no-console\n        console.error(\"Not reporting uncaught error back to master thread as it \" +\n            \"occured while reporting an uncaught error already.\" +\n            \"\\nLatest error:\", subError, \"\\nOriginal error:\", error);\n    }\n}\nfunction runFunction(jobUID, fn, args) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let syncResult;\n        try {\n            syncResult = fn(...args);\n        }\n        catch (error) {\n            return postJobErrorMessage(jobUID, error);\n        }\n        const resultType = isObservable(syncResult) ? \"observable\" : \"promise\";\n        postJobStartMessage(jobUID, resultType);\n        if (isObservable(syncResult)) {\n            const subscription = syncResult.subscribe(value => postJobResultMessage(jobUID, false, serialize(value)), error => {\n                postJobErrorMessage(jobUID, serialize(error));\n                activeSubscriptions.delete(jobUID);\n            }, () => {\n                postJobResultMessage(jobUID, true);\n                activeSubscriptions.delete(jobUID);\n            });\n            activeSubscriptions.set(jobUID, subscription);\n        }\n        else {\n            try {\n                const result = yield syncResult;\n                postJobResultMessage(jobUID, true, serialize(result));\n            }\n            catch (error) {\n                postJobErrorMessage(jobUID, serialize(error));\n            }\n        }\n    });\n}\n/**\n * Expose a function or a module (an object whose values are functions)\n * to the main thread. Must be called exactly once in every worker thread\n * to signal its API to the main thread.\n *\n * @param exposed Function or object whose values are functions\n */\nexport function expose(exposed) {\n    if (!Implementation.isWorkerRuntime()) {\n        throw Error(\"expose() called in the master thread.\");\n    }\n    if (exposeCalled) {\n        throw Error(\"expose() called more than once. This is not possible. Pass an object to expose() if you want to expose multiple functions.\");\n    }\n    exposeCalled = true;\n    if (typeof exposed === \"function\") {\n        Implementation.subscribeToMasterMessages(messageData => {\n            if (isMasterJobRunMessage(messageData) && !messageData.method) {\n                runFunction(messageData.uid, exposed, messageData.args.map(deserialize));\n            }\n        });\n        postFunctionInitMessage();\n    }\n    else if (typeof exposed === \"object\" && exposed) {\n        Implementation.subscribeToMasterMessages(messageData => {\n            if (isMasterJobRunMessage(messageData) && messageData.method) {\n                runFunction(messageData.uid, exposed[messageData.method], messageData.args.map(deserialize));\n            }\n        });\n        const methodNames = Object.keys(exposed).filter(key => typeof exposed[key] === \"function\");\n        postModuleInitMessage(methodNames);\n    }\n    else {\n        throw Error(`Invalid argument passed to expose(). Expected a function or an object, got: ${exposed}`);\n    }\n    Implementation.subscribeToMasterMessages(messageData => {\n        if (isMasterJobCancelMessage(messageData)) {\n            const jobUID = messageData.uid;\n            const subscription = activeSubscriptions.get(jobUID);\n            if (subscription) {\n                subscription.unsubscribe();\n                activeSubscriptions.delete(jobUID);\n            }\n        }\n    });\n}\nif (typeof self !== \"undefined\" && typeof self.addEventListener === \"function\" && Implementation.isWorkerRuntime()) {\n    self.addEventListener(\"error\", event => {\n        // Post with some delay, so the master had some time to subscribe to messages\n        setTimeout(() => postUncaughtErrorMessage(event.error || event), 250);\n    });\n    self.addEventListener(\"unhandledrejection\", event => {\n        const error = event.reason;\n        if (error && typeof error.message === \"string\") {\n            // Post with some delay, so the master had some time to subscribe to messages\n            setTimeout(() => postUncaughtErrorMessage(error), 250);\n        }\n    });\n}\nif (typeof process !== \"undefined\" && typeof process.on === \"function\" && Implementation.isWorkerRuntime()) {\n    process.on(\"uncaughtException\", (error) => {\n        // Post with some delay, so the master had some time to subscribe to messages\n        setTimeout(() => postUncaughtErrorMessage(error), 250);\n    });\n    process.on(\"unhandledRejection\", (error) => {\n        if (error && typeof error.message === \"string\") {\n            // Post with some delay, so the master had some time to subscribe to messages\n            setTimeout(() => postUncaughtErrorMessage(error), 250);\n        }\n    });\n}\n","import { EntityID } from \"@latticexyz/recs\";\nimport { Message } from \"@latticexyz/services/protobuf/ts/ecs-relay/ecs-relay\";\nimport { BigNumber } from \"ethers\";\nimport { keccak256 } from \"ethers/lib/utils\";\n\n// Message payload to sign and use to recover signer\nexport function messagePayload(msg: Message) {\n  return `(${msg.version},${msg.id},${keccak256(msg.data)},${msg.timestamp})`;\n}\n\n// Remove zero padding from all entity ids\nexport function formatEntityID(entityID: string | EntityID | BigNumber): EntityID {\n  if (BigNumber.isBigNumber(entityID) || entityID.substring(0, 2) === \"0x\") {\n    return BigNumber.from(entityID).toHexString() as EntityID;\n  }\n  return entityID as EntityID;\n}\n\n// Remove zero padding from all component ids\nexport function formatComponentID(componentID: string | BigNumber): string {\n  return BigNumber.from(componentID).toHexString();\n}\n","import { Message } from \"@latticexyz/services/protobuf/ts/ecs-relay/ecs-relay\";\nimport { expose } from \"threads\";\nimport { verifyMessage } from \"ethers/lib/utils\";\nimport { messagePayload } from \"../utils\";\n\nfunction recoverAddress(msg: Message) {\n  return verifyMessage(messagePayload(msg), msg.signature);\n}\n\nexpose({ recoverAddress });\n"],"names":["$b264527fa8960061$exports","value","Symbol","observable","$97b05d13b4c760e0$var$DefaultErrorSerializer","deserialize","message","Object","assign","Error","name","stack","serialize","error","__error_marker","$b76972cfc41731e9$var$registeredSerializer","thing","input","$b76972cfc41731e9$export$efcd34ab6248d3cd","$b76972cfc41731e9$export$dfdc1655ccc5b9cb","$1c6b8a7e858ed22c$export$ee3ff921c91bafed","$3942f9186c9b44a7$export$5f1b21a6551d4e81","$0acbc75c2a766f4c$export$38c4a5cca0c0a512","MasterMessageType","$0acbc75c2a766f4c$export$6261d9101cd2df4c","WorkerMessageType","$980903bdd2860d41$export$2e2bcd8739ae039","isWindowContext","self","Window","postMessage","data","transferList","onMessage","messageHandler","messageEvent","addEventListener","removeEventListener","$e11121a496aaabc0$var$__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","e","rejected","result","done","then","apply","isWorkerRuntime","$e11121a496aaabc0$var$exposeCalled","$e11121a496aaabc0$var$activeSubscriptions","Map","$e11121a496aaabc0$var$isMasterJobCancelMessage","type","cancel","$e11121a496aaabc0$var$isMasterJobRunMessage","run","$e11121a496aaabc0$var$isObservable","$parcel$interopDefault","subscribe","$e11121a496aaabc0$var$isZenObservable","$e11121a496aaabc0$var$deconstructTransfer","payload","send","transferables","undefined","$e11121a496aaabc0$var$postJobErrorMessage","uid","rawError","errorMessage","postMessageToMaster","$e11121a496aaabc0$var$postJobResultMessage","completed","resultValue","resultMessage","complete","$e11121a496aaabc0$var$postUncaughtErrorMessage","uncaughtError","subError","console","$e11121a496aaabc0$var$runFunction","jobUID","fn","args","this","syncResult","resultType","startMessage","running","$e11121a496aaabc0$var$postJobStartMessage","subscription","delete","set","$e11121a496aaabc0$export$9b7f6e342a8cbd38","exposed","subscribeToMasterMessages","messageData","method","map","initMessage","init","$e11121a496aaabc0$var$postFunctionInitMessage","methodNames","methods","$e11121a496aaabc0$var$postModuleInitMessage","keys","filter","key","get","unsubscribe","event","setTimeout","reason","$XjWtB","on","$c72b781f6c157984$var$$8144b28c31f064c5$export$7a07edb15ce80ac4","msg","version","id","$lChSS","keccak256","timestamp","$c72b781f6c157984$var$$8144b28c31f064c5$export$fa1c3b405b77c990","entityID","$HVvcW","BigNumber","isBigNumber","substring","from","toHexString","$c72b781f6c157984$var$$8144b28c31f064c5$export$df44822d7678761c","componentID","$e11121a496aaabc0$exports","expose","recoverAddress","verifyMessage","signature"],"version":3,"file":"Recover.worker.639cbcdd.b329cef6.js.map"}